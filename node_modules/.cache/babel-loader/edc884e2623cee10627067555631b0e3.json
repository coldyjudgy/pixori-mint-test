{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\kk\\\\pixori-prototype\\\\src\\\\clusters\\\\token-cluster.js\";\nimport React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport * as t from \"@onflow/types\";\nexport function TokenCluster({\n  address\n}) {\n  const [nftInfo, setNftInfo] = useState(null);\n\n  const fetchTokenData = async () => {\n    const encoded = await fcl.send([fcl.script`\n        import Pixori from 0x05f5f6e2056f588b\n\n        pub fun main(address: Address): [{String: String}] {\n          let nftOwner = getAccount(address)  \n          let capability = nftOwner.getCapability<&{Pixori.NFTReceiver}>(/public/NFTReceiver)\n      \n          let receiverRef = capability.borrow()\n              ?? panic(\"Could not borrow the receiver reference\")\n\n          let allIDs = receiverRef.getIDs()\n          var allMetadata: [{String: String}] = []\n      \n          for id in allIDs {\n              allMetadata.append(receiverRef.getMetadata(id: id))\n          }\n\n          return allMetadata\n        }\n      `, fcl.args([fcl.arg(address, t.Address)])]);\n    const decoded = await fcl.decode(encoded);\n    setNftInfo(decoded);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchTokenData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Show my NFTs\")), nftInfo && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, Object.keys(nftInfo).map(k => {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"NFT #\", k, \" > Name: \", nftInfo[k].name, \" / Date: \", nftInfo[k].date, \" / Time: \", nftInfo[k].time, \" / Location: \", nftInfo[k].location);\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNftInfo(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Clear NFTs\")));\n}","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/kk/pixori-prototype/src/clusters/token-cluster.js"],"names":["React","useState","fcl","t","TokenCluster","address","nftInfo","setNftInfo","fetchTokenData","encoded","send","script","args","arg","Address","decoded","decode","Object","keys","map","k","name","date","time","location"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,KAAKC,GAAZ,MAAqB,aAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,eAAnB;AAEA,OAAO,SAASC,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAiC;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC;;AACA,QAAMO,cAAc,GAAG,YAAY;AACjC,UAAMC,OAAO,GAAG,MAAMP,GAAG,CACtBQ,IADmB,CACd,CACJR,GAAG,CAACS,MAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OApBY,EAqBNT,GAAG,CAACU,IAAJ,CAAS,CAACV,GAAG,CAACW,GAAJ,CAAQR,OAAR,EAAiBF,CAAC,CAACW,OAAnB,CAAD,CAAT,CArBM,CADc,CAAtB;AAyBA,UAAMC,OAAO,GAAG,MAAMb,GAAG,CAACc,MAAJ,CAAWP,OAAX,CAAtB;AACAF,IAAAA,UAAU,CAACQ,OAAD,CAAV;AACD,GA5BD;;AA8BA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEP,cAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF,EAKIF,OAAO,iBACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKW,MAAM,CAACC,IAAP,CAAYZ,OAAZ,EAAqBa,GAArB,CAAyBC,CAAC,IAAI;AAC7B,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACQA,CADR,eACoBd,OAAO,CAACc,CAAD,CAAP,CAAWC,IAD/B,eAC8Cf,OAAO,CAACc,CAAD,CAAP,CAAWE,IADzD,eACwEhB,OAAO,CAACc,CAAD,CAAP,CAAWG,IADnF,mBACsGjB,OAAO,CAACc,CAAD,CAAP,CAAWI,QADjH,CADF;AAKD,GANA,CADL,eASE;AAAQ,IAAA,OAAO,EAAE,MAAMjB,UAAU,CAAC,IAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF,CANJ,CADF;AAqBD","sourcesContent":["import React, { useState } from \"react\";\r\nimport * as fcl from \"@onflow/fcl\";\r\nimport * as t from \"@onflow/types\"\r\n\r\nexport function TokenCluster({address}) {\r\n  const [nftInfo, setNftInfo] = useState(null)\r\n  const fetchTokenData = async () => {\r\n    const encoded = await fcl\r\n      .send([\r\n        fcl.script`\r\n        import Pixori from 0x05f5f6e2056f588b\r\n\r\n        pub fun main(address: Address): [{String: String}] {\r\n          let nftOwner = getAccount(address)  \r\n          let capability = nftOwner.getCapability<&{Pixori.NFTReceiver}>(/public/NFTReceiver)\r\n      \r\n          let receiverRef = capability.borrow()\r\n              ?? panic(\"Could not borrow the receiver reference\")\r\n\r\n          let allIDs = receiverRef.getIDs()\r\n          var allMetadata: [{String: String}] = []\r\n      \r\n          for id in allIDs {\r\n              allMetadata.append(receiverRef.getMetadata(id: id))\r\n          }\r\n\r\n          return allMetadata\r\n        }\r\n      `,\r\n      fcl.args([fcl.arg(address, t.Address)]),\r\n      ])\r\n    \r\n    const decoded = await fcl.decode(encoded)\r\n    setNftInfo(decoded) \r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <button onClick={fetchTokenData}>Show my NFTs</button>        \r\n      </div>\r\n      {\r\n        nftInfo &&\r\n        <div>\r\n            {Object.keys(nftInfo).map(k => {\r\n              return (\r\n                <p>\r\n                  NFT #{k} > Name: {nftInfo[k].name} / Date: {nftInfo[k].date} / Time: {nftInfo[k].time} / Location: {nftInfo[k].location}\r\n                </p>\r\n              )\r\n            })\r\n            }\r\n          <button onClick={() => setNftInfo(null)}>Clear NFTs</button>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}