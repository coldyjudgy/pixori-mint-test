{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Desktop\\\\kk\\\\pixori-prototype\\\\src\\\\Components\\\\Square.jsx\";\nimport React, { useState } from 'react';\nimport '../styles/index.css';\nimport { Howl, Howler } from 'howler';\nimport { getBassNote } from '../helpers/instruments';\nimport { Fragment } from 'react';\nimport CreateNft from './CreateNft';\nconst arr1 = Array.from(Array(16), () => new Array(32).fill(0));\n\nconst Square = props => {\n  const {\n    selectedColor\n  } = props.color;\n  const [pixelColor, setPixelColor] = useState(\"#fff\");\n  const [oldColor, setOldColor] = useState(pixelColor);\n  const [canChangeColor, setCanChangeColor] = useState(true);\n  const [toggle, setToggle] = useState(false);\n\n  const handleClick = () => {\n    setToggle(!toggle);\n\n    if (!toggle) {\n      let sound = new Howl({\n        src: [props.name === 'Bassline' ? getBassNote(props.column) : props.sound],\n        html5: true\n      });\n      sound.play();\n      Howler.volume(1);\n    }\n\n    setPixelColor(props.color);\n    setCanChangeColor(false); // need to pass row, col, toggle back up to the grid in App.js\n\n    props.updateGrid(props.row, props.column, !toggle, props.color);\n    arr1[props.row].splice(props.column, 1, props.color);\n  };\n\n  function resetColor() {\n    if (canChangeColor) {\n      setPixelColor(oldColor);\n    }\n\n    setCanChangeColor(true);\n  }\n\n  function changeColorOnHover() {\n    setOldColor(pixelColor);\n    setPixelColor(selectedColor);\n  } //TODO: Move in-line styles out of components\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    className: \"tCell\",\n    style: toggle ? {\n      background: pixelColor,\n      padding: '27px'\n    } : {\n      background: '#fffff7',\n      padding: '27px'\n    },\n    onClick: () => {\n      handleClick();\n    },\n    onMouseEnter: changeColorOnHover,\n    onMouseLeave: resetColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default Square;","map":{"version":3,"sources":["C:/Users/ASUS/Desktop/kk/pixori-prototype/src/Components/Square.jsx"],"names":["React","useState","Howl","Howler","getBassNote","Fragment","CreateNft","arr1","Array","from","fill","Square","props","selectedColor","color","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","toggle","setToggle","handleClick","sound","src","name","column","html5","play","volume","updateGrid","row","splice","resetColor","changeColorOnHover","background","padding"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport '../styles/index.css';\r\nimport { Howl, Howler } from 'howler';\r\nimport { getBassNote } from '../helpers/instruments'\r\nimport { Fragment } from 'react';\r\nimport CreateNft from './CreateNft'\r\nconst arr1 = Array.from(Array(16), () => new Array(32).fill(0));\r\n\r\nconst Square = (props) => {\r\n\r\n  const { selectedColor } = props.color;\r\n\r\n  const [pixelColor, setPixelColor] = useState(\"#fff\");\r\n  const [oldColor, setOldColor] = useState(pixelColor);\r\n  const [canChangeColor, setCanChangeColor] = useState(true);\r\n\r\n  const [toggle, setToggle] = useState(false);\r\n \r\n\r\n\r\n \r\n\r\n  const handleClick = () => {\r\n    setToggle(!toggle);\r\n    if(!toggle) {\r\n      let sound = new Howl({\r\n        src: [(props.name === 'Bassline') ? getBassNote(props.column) : props.sound],\r\n        html5: true,\r\n    \r\n      });\r\n\r\n      sound.play();\r\n      Howler.volume(1);\r\n\r\n      \r\n    }\r\n    setPixelColor(props.color);\r\n    setCanChangeColor(false);\r\n    \r\n    // need to pass row, col, toggle back up to the grid in App.js\r\n\r\n\r\n    props.updateGrid(props.row, props.column, !toggle,props.color);\r\n    arr1[props.row].splice(props.column,1,props.color)\r\n  }\r\n\r\n  function resetColor() {\r\n    if (canChangeColor) {\r\n      setPixelColor(oldColor);\r\n    }\r\n\r\n    setCanChangeColor(true);\r\n  }\r\n  function changeColorOnHover() {\r\n    setOldColor(pixelColor);\r\n    setPixelColor(selectedColor);\r\n \r\n  }\r\n\r\n  \r\n  //TODO: Move in-line styles out of components\r\n  return (\r\n    <React.Fragment>\r\n\r\n    <td className=\"tCell\"\r\n      style={toggle ? { background: pixelColor, padding: '27px' } : { background: '#fffff7', padding: '27px' }}\r\n    \r\n      onClick={() =>{ handleClick();}}\r\n\r\n      onMouseEnter={changeColorOnHover}\r\n      onMouseLeave={resetColor}/>\r\n      \r\n   \r\n      </React.Fragment>\r\n \r\n\r\n    )\r\n  \r\n    }\r\n\r\nexport default Square;"]},"metadata":{},"sourceType":"module"}